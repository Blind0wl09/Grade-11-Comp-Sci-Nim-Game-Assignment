import random  # imports random module
import time  # imports time module
import os  # imports os module

# ===================================================================================================
def type(text):  # function to animate text with delay parameter
    for char in text:
        print(char, end='', flush=True)
        time.sleep(0.03)  # delays the print of each letter by the assigned delay value
    print()
# ===================================================================================================
def two_player_game():  # function for two player game mode
    red = '\033[31m'
    blue = '\033[34m'
    reset = '\033[0m'
    os.system('cls' if os.name == 'nt' else 'clear')
    time.sleep(0.5)
    type("Enter your name PLAYER 1: ")
    player1 = input("> ")
    type(f"PLAYER 1: {red}{player1}{reset}")
    time.sleep(0.5)
    type("\nEnter your name PLAYER 2: ")
    player2 = input("> ")
    type(f"PLAYER 2: {blue}{player2}{reset}")
    time.sleep(0.5)
    os.system('cls' if os.name == 'nt' else 'clear')

    def pick_number():  # function to decide who goes first
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            type(f"{red}{player1}{reset} pick a number from 1 to 100")
            coin_input1 = input("> ")
            if coin_input1.isdigit() and 1 <= int(coin_input1) <= 100:
                coin_input1 = int(coin_input1)
                time.sleep(1)
                type(f"\n{blue}{player2}{reset} pick a number from 1 to 100")
                coin_input2 = input("> ")
                if coin_input2.isdigit() and 1 <= int(coin_input2) <= 100:
                    return int(coin_input1), int(coin_input2)
                else:
                    type("Invalid input.")
            else:
                type("Invalid input.")

    coin_input1, coin_input2 = pick_number()
    random_number = random.randint(1, 100)
    diff1, diff2 = abs(coin_input1 - random_number), abs(coin_input2 - random_number)

    os.system('cls' if os.name == 'nt' else 'clear')
    if diff1 < diff2:
        type(f"{red}{player1}{reset} starts first! (Closest to {random_number})")
        time.sleep(1)
    elif diff2 < diff1:
        type(f"{blue}{player2}{reset} starts first! (Closest to {random_number})")
        time.sleep(1)
    else:
        type("Both players are equally close to the random number.")
        coin_input1, coin_input2 = pick_number()

    piles = [3, 5, 7]
    player = 2

    def show_objects():
        for pile in piles:
            print("🃏" * pile)

    def game_over():
        return all(pile == 0 for pile in piles)

    def define_winner():
        time.sleep(0.5)
        os.system('cls' if os.name == 'nt' else 'clear')
        time.sleep(0.5)
        type(f"{player1 if player == 1 else player2} wins!")
        time.sleep(0.5)
        os.system('cls' if os.name == 'nt' else 'clear')

    while not game_over():
        os.system('cls' if os.name == 'nt' else 'clear')
        show_objects()
        player = 3 - player
        print(f"{player1 if player == 1 else player2}'s turn!")
        valid_move = False
        while not valid_move:
            chosen_pile = int(input(f"Choose a deck (1-{len(piles)}): ")) - 1
            if 0 <= chosen_pile < len(piles) and piles[chosen_pile] > 0:
                time.sleep(0.5)
                amount = int(input(f"How many to remove from pile {chosen_pile + 1}? "))
                if 0 < amount <= piles[chosen_pile]:
                    piles[chosen_pile] -= amount
                    valid_move = True
                    time.sleep(0.5)
    if game_over():
        define_winner()
# ===================================================================================================
def vs_computer():
    green = '\033[32m'
    bright_purple = '\033[35m'
    underline = '\033[4m'
    reset = '\033[0m'
    computer = "Computer"

    # get player's name
    type("Enter your name PLAYER: ")
    player1 = input("> ")
    while player1 == "":
        os.system('cls' if os.name == 'nt' else 'clear')
        time.sleep(0.5)
        type("Enter your name PLAYER: ")
        player1 = input("> ")

    time.sleep(0.5)
    os.system('cls' if os.name == 'nt' else 'clear')
    type(f"{green}{player1}{reset} vs {bright_purple}{computer}{reset}")
    time.sleep(0.75)

    piles = [3, 5, 7]
    current_turn = None

    def pick_number():  # function to decide who goes first
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            type(f"{green}{player1}{reset} pick a number from 1 to 100")
            player_input = input("> ")  # player's input

            if player_input.isdigit() and 1 <= int(player_input) <= 100:
                player_input = int(player_input)

                # computer input
                time.sleep(1)
                computer_input = random.randint(1, 100)

                # check if computer's choice matches player's choice
                while computer_input == player_input:
                    computer_input = random.randint(1, 100)  # regenerate if they match

                type(f"\n{bright_purple}{computer}{reset} picked: {computer_input}")
                time.sleep(1)

                # return both inputs
                return player_input, computer_input
            else:
                type("Invalid input.")
                time.sleep(0.5)
                # no need to return, the loop continues until valid input

    # determine who goes first
    player_input, computer_input = pick_number()
    random_number = random.randint(1, 100)
    diff1, diff2 = abs(player_input - random_number), abs(computer_input - random_number)
    os.system('cls' if os.name == 'nt' else 'clear')

    if diff1 < diff2:
        type(f"{green}{player1}{reset} starts first! (Closest to {random_number})")
        current_player = player1  # set current player
        current_turn = player1
    else:
        type(f"{bright_purple}{computer}{reset} starts first! (Closest to {random_number})")
        current_player = computer  # set current player
        current_turn = computer

    time.sleep(1)
    os.system('cls' if os.name == 'nt' else 'clear')

    def show_objects():
        for i, pile in enumerate(piles):
            print(f"Pile {i + 1}: {'🃏' * pile}")

    def game_over(last_player):  # Accept last_player as an argument
        if all(pile == 0 for pile in piles):
            os.system('cls' if os.name == 'nt' else 'clear')
            # the last player has taken the last object, so they lose
            if last_player == player1:
                type(f"Game over! {bright_purple}{computer}{reset} wins! {player1} loses.")
            else:
                type(f"Game over! {green}{player1}{reset} wins! {computer} loses.")
            time.sleep(1.5)
            return True
        return False

    def player_turn():
        while True:
            pile = int(input("Choose a deck (1-3): ")) - 1
            if 0 <= pile < len(piles) and piles[pile] > 0:
                objects = int(input("How many to remove? "))
                if 0 < objects <= piles[pile]:
                    piles[pile] -= objects
                    break

    def computer_turn():
        pile = max(piles)
        pile_index = piles.index(pile)  # removes piles
        if sum(piles) == 0:
            return

        remove = random.randint(1, pile)
        piles[pile_index] -= remove
        type(f"\n{bright_purple}{computer}{reset} removes {underline}{remove}{reset} from {underline}pile {pile_index + 1}{reset}.")
        time.sleep(1.25)

# main game loop
    last_player = None  # variable to track the last player who took a turn
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        if current_turn == player1:
            type(f"{green}{player1}{reset}'s Turn:")
            show_objects()
            player_turn()
            last_player = player1  # update last player
            current_turn = computer  # switch turns to the computer
        else:
            type(f"{bright_purple}{computer}{reset}'s Turn:")
            show_objects()
            computer_turn()
            last_player = computer  # update last player
            current_turn = player1  # switch turns to the player

        # check for game over after each turn
        if game_over(last_player):  # Call with last_player as argument
            break
# ===========================================================================================================================================
def vs_computer_reverso():
    green = '\033[32m'
    bright_purple = '\033[35m'
    underline = '\033[4m'
    reset = '\033[0m'
    computer = "Computer"

    # get player's name
    type("Enter your name PLAYER: ")
    player1 = input("> ")
    while player1 == "":
        os.system('cls' if os.name == 'nt' else 'clear')
        time.sleep(0.5)
        type("Enter your name PLAYER: ")
        player1 = input("> ")

    time.sleep(0.5)
    os.system('cls' if os.name == 'nt' else 'clear')
    type(f"{green}{player1}{reset} vs {bright_purple}{computer}{reset}")
    time.sleep(0.75)

    piles = [3, 5, 7]
    current_turn = None

    def pick_number():  # function to decide who goes first
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            type(f"{green}{player1}{reset} pick a number from 1 to 100")
            player_input = input("> ")  # player's input

            if player_input.isdigit() and 1 <= int(player_input) <= 100:
                player_input = int(player_input)

                # computer input
                time.sleep(1)
                computer_input = random.randint(1, 100)

                # check if computer's choice matches player's choice
                while computer_input == player_input:
                    computer_input = random.randint(1, 100)  # regenerate if they match

                type(f"\n{bright_purple}{computer}{reset} picked: {computer_input}")
                time.sleep(1)

                # return both inputs
                return player_input, computer_input
            else:
                type("Invalid input.")
                time.sleep(0.5)

    # determine who goes first
    player_input, computer_input = pick_number()
    random_number = random.randint(1, 100)
    diff1, diff2 = abs(player_input - random_number), abs(computer_input - random_number)
    os.system('cls' if os.name == 'nt' else 'clear')

    if diff1 < diff2:
        type(f"{green}{player1}{reset} starts first! (Closest to {random_number})")
        current_player = player1
        current_turn = player1
    else:
        type(f"{bright_purple}{computer}{reset} starts first! (Closest to {random_number})")
        current_player = computer
        current_turn = computer

    time.sleep(1)
    os.system('cls' if os.name == 'nt' else 'clear')

    def show_objects():
        for i, pile in enumerate(piles):
            print(f"Pile {i + 1}: {'🃏' * pile}")

    def game_over(last_player):
        if all(pile == 0 for pile in piles):
            os.system('cls' if os.name == 'nt' else 'clear')
            # in reverse Nim, the player who takes the last object wins
            if last_player == player1:
                type(f"Game over! {green}{player1}{reset} wins! {computer} loses.")
            else:
                type(f"Game over! {bright_purple}{computer}{reset} wins! {player1} loses.")
            time.sleep(1.5)
            return True
        return False

    def player_turn():
        while True:
            pile = int(input("Choose a pile (1-3): ")) - 1
            if 0 <= pile < len(piles) and piles[pile] > 0:
                objects = int(input("How many to remove? "))
                if 0 < objects <= piles[pile]:
                    piles[pile] -= objects
                    break
            else:
                print("Invalid move. Try again.")

    def computer_turn():
        pile = max(piles)
        pile_index = piles.index(pile)
        if sum(piles) == 0:
            return

        remove = random.randint(1, pile)
        piles[pile_index] -= remove
        type(f"\n{bright_purple}{computer}{reset} removes {underline}{remove}{reset} from {underline}pile {pile_index + 1}{reset}.")
        time.sleep(1.25)

    # main game loop
    last_player = None
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        if current_turn == player1:
            type(f"{green}{player1}{reset}'s Turn:")
            show_objects()
            player_turn()
            last_player = player1
            current_turn = computer
        else:
            type(f"{bright_purple}{computer}{reset}'s Turn:")
            show_objects()
            computer_turn()
            last_player = computer
            current_turn = player1

        # check for game over after each turn
        if game_over(last_player):
            break
#=====================================================================================================================================================
cyan = '\033[36m'  # import cyan text color
bright_green = '\033[92m'  # import bright green text color
bright_gray = "\033[0;37m"
bold = '\033[1m'
bright_magenta = '\033[95m'
bright_yellow = '\033[93m'
reset = '\033[0m'  # resets the text color to default

# title screen
type(f"Welcome to {cyan}{bold}Nim{reset}")
time.sleep(0.5)  # delays the upcoming text by 0.5 seconds
type(f"\nPress the{bright_green} enter {reset}key to continue")
input("> ")  # user input
os.system('cls' if os.name == 'nt' else 'clear')  # clear console
time.sleep(0.1)

# main menu loop
while True:
    os.system('cls' if os.name == 'nt' else 'clear')
    type(f"Select game mode ({bright_yellow}1: Two Player{reset}, {bright_magenta}2: VS Computer{reset}, {bright_gray}3: VS Computer reverse mode{reset}):")
    choice = input("> ").lower()
    if choice in ["1", "two player"]:  
        time.sleep(0.5)
        os.system('cls' if os.name == 'nt' else 'clear')
        type("Two Player mode selected")
        time.sleep(0.5)
        os.system('cls' if os.name == 'nt' else 'clear')
        two_player_game()
    elif choice in ["2", "vs computer"]:
        time.sleep(0.5)
        os.system('cls' if os.name == 'nt' else 'clear')
        type("Vs Computer mode selected")
        time.sleep(0.5)
        os.system('cls' if os.name == 'nt' else 'clear')
        vs_computer()
    else:
        type("Invalid input.")
        time.sleep(0.5)
            
